{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { matchesType } from '../../utils/matchesType';\nimport { HOVER } from './types';\nexport function createHover(manager) {\n  return function hover(targetIdsArg) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        clientOffset = _ref.clientOffset;\n\n    verifyTargetIdsIsArray(targetIdsArg);\n    var targetIds = targetIdsArg.slice(0);\n    var monitor = manager.getMonitor();\n    var registry = manager.getRegistry();\n    checkInvariants(targetIds, monitor, registry);\n    var draggedItemType = monitor.getItemType();\n    removeNonMatchingTargetIds(targetIds, registry, draggedItemType);\n    hoverAllTargets(targetIds, monitor, registry);\n    return {\n      type: HOVER,\n      payload: {\n        targetIds: targetIds,\n        clientOffset: clientOffset || null\n      }\n    };\n  };\n}\n\nfunction verifyTargetIdsIsArray(targetIdsArg) {\n  invariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');\n}\n\nfunction checkInvariants(targetIds, monitor, registry) {\n  invariant(monitor.isDragging(), 'Cannot call hover while not dragging.');\n  invariant(!monitor.didDrop(), 'Cannot call hover after drop.');\n\n  for (var i = 0; i < targetIds.length; i++) {\n    var targetId = targetIds[i];\n    invariant(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');\n    var target = registry.getTarget(targetId);\n    invariant(target, 'Expected targetIds to be registered.');\n  }\n}\n\nfunction removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {\n  // Remove those targetIds that don't match the targetType.  This\n  // fixes shallow isOver which would only be non-shallow because of\n  // non-matching targets.\n  for (var i = targetIds.length - 1; i >= 0; i--) {\n    var targetId = targetIds[i];\n    var targetType = registry.getTargetType(targetId);\n\n    if (!matchesType(targetType, draggedItemType)) {\n      targetIds.splice(i, 1);\n    }\n  }\n}\n\nfunction hoverAllTargets(targetIds, monitor, registry) {\n  // Finally call hover on all matching targets.\n  targetIds.forEach(function (targetId) {\n    var target = registry.getTarget(targetId);\n    target.hover(monitor, targetId);\n  });\n}","map":{"version":3,"names":["invariant","matchesType","HOVER","createHover","manager","hover","targetIdsArg","_ref","arguments","length","undefined","clientOffset","verifyTargetIdsIsArray","targetIds","slice","monitor","getMonitor","registry","getRegistry","checkInvariants","draggedItemType","getItemType","removeNonMatchingTargetIds","hoverAllTargets","type","payload","Array","isArray","isDragging","didDrop","i","targetId","lastIndexOf","target","getTarget","targetType","getTargetType","splice","forEach"],"sources":["C:/Users/user/Documents/GIEPS-Project/gogetit-ieps-frontend/node_modules/dnd-core/dist/esm/actions/dragDrop/hover.js"],"sourcesContent":["import { invariant } from '@react-dnd/invariant';\r\nimport { matchesType } from '../../utils/matchesType';\r\nimport { HOVER } from './types';\r\nexport function createHover(manager) {\r\n  return function hover(targetIdsArg) {\r\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n        clientOffset = _ref.clientOffset;\r\n\r\n    verifyTargetIdsIsArray(targetIdsArg);\r\n    var targetIds = targetIdsArg.slice(0);\r\n    var monitor = manager.getMonitor();\r\n    var registry = manager.getRegistry();\r\n    checkInvariants(targetIds, monitor, registry);\r\n    var draggedItemType = monitor.getItemType();\r\n    removeNonMatchingTargetIds(targetIds, registry, draggedItemType);\r\n    hoverAllTargets(targetIds, monitor, registry);\r\n    return {\r\n      type: HOVER,\r\n      payload: {\r\n        targetIds: targetIds,\r\n        clientOffset: clientOffset || null\r\n      }\r\n    };\r\n  };\r\n}\r\n\r\nfunction verifyTargetIdsIsArray(targetIdsArg) {\r\n  invariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');\r\n}\r\n\r\nfunction checkInvariants(targetIds, monitor, registry) {\r\n  invariant(monitor.isDragging(), 'Cannot call hover while not dragging.');\r\n  invariant(!monitor.didDrop(), 'Cannot call hover after drop.');\r\n\r\n  for (var i = 0; i < targetIds.length; i++) {\r\n    var targetId = targetIds[i];\r\n    invariant(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');\r\n    var target = registry.getTarget(targetId);\r\n    invariant(target, 'Expected targetIds to be registered.');\r\n  }\r\n}\r\n\r\nfunction removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {\r\n  // Remove those targetIds that don't match the targetType.  This\r\n  // fixes shallow isOver which would only be non-shallow because of\r\n  // non-matching targets.\r\n  for (var i = targetIds.length - 1; i >= 0; i--) {\r\n    var targetId = targetIds[i];\r\n    var targetType = registry.getTargetType(targetId);\r\n\r\n    if (!matchesType(targetType, draggedItemType)) {\r\n      targetIds.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction hoverAllTargets(targetIds, monitor, registry) {\r\n  // Finally call hover on all matching targets.\r\n  targetIds.forEach(function (targetId) {\r\n    var target = registry.getTarget(targetId);\r\n    target.hover(monitor, targetId);\r\n  });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}